{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,uBAC9BE,KAAMH,SAASC,cAAc,sBAC7BG,OAAQJ,SAASC,cAAc,yBA6BjC,SAASI,EAAcC,EAAUJ,GAC/B,OAAO,IAAIK,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,GACFF,EAAQ,CAAEF,WAAUJ,UAEtBO,EAAO,CAAEH,WAAUJ,YAClBA,MAnCPJ,EAAKC,KAAKe,iBAAiB,UAAU,SAACC,GACpCA,EAAIC,iBAaN,SAAcC,GACZ,I,IADaC,EAADD,EAACf,MAAOC,EAARc,EAAQd,KAAMC,EAAda,EAAcb,OACjBe,EAAI,EAAGA,GAAKf,EAAQe,GAAK,EAC9Bd,EAAcc,EAAGD,GACdE,MAAK,SAAAC,G,IAAGf,EAAQe,EAARf,SAAUJ,EAAKmB,EAALnB,MACjBN,EAAA0B,OAAOC,QAAQ,uBAAwCC,OAAflB,EAAS,QAAYkB,OAANtB,EAAM,UAE9DuB,OAAM,SAAAJ,G,IAAGf,EAAQe,EAARf,SAAUJ,EAAKmB,EAALnB,MAClBN,EAAA0B,OAAOI,QAAQ,sBAAuCF,OAAflB,EAAS,QAAYkB,OAANtB,EAAM,UAEhEgB,GAASf,EAZbwB,CALiB,CACfzB,MAAO0B,OAAO9B,EAAKI,MAAM2B,OACzB1B,KAAMyB,OAAO9B,EAAKK,KAAK0B,OACvBzB,OAAQwB,OAAO9B,EAAKM,OAAOyB,Y","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n}\n\nrefs.form.addEventListener('submit', (evt) => {\n  evt.preventDefault();\n  getFormData();\n});\n\nfunction getFormData() {\n  const formData = {\n    delay: Number(refs.delay.value),\n    step: Number(refs.step.value),\n    amount: Number(refs.amount.value),\n  }\n  for1(formData);\n}\n\nfunction for1({delay, step, amount}) {\n  for (let i = 1; i <= amount; i += 1) {\n      createPromise(i, delay)\n        .then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        })\n      delay += step;\n  }\n}\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n      reject({ position, delay });\n    }, delay);\n\n  });\n};\n  // for (let i = 1; i <= formData.amount; i += 1) {\n  //   createPromise(i, formData.delay)\n  //     .then(({ position, delay }) => {\n  //       Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  //     })\n  //     .catch(({ position, delay }) => {\n  //       Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  //     })\n  //   formData.delay += formData.step;\n  // }"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delay","step","amount","$ce04d3a99e08e73b$var$createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","evt","preventDefault","param1","delay1","i","then","param","Notify","success","concat","catch","failure","$ce04d3a99e08e73b$var$for1","Number","value"],"version":3,"file":"03-promises.07607054.js.map"}