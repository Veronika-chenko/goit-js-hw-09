{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,uBAC9BE,KAAMH,SAASC,cAAc,sBAC7BG,OAAQJ,SAASC,cAAc,yBA6BjC,SAASI,EAAcC,EAAUJ,GAC/B,OAAO,IAAIK,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,GACFF,EAAQ,C,SAAEF,E,MAAUJ,IAEtBO,EAAO,C,SAAEH,E,MAAUJ,MAClBA,MAnCPJ,EAAKC,KAAKe,iBAAiB,UAAWC,IACpCA,EAAIC,iBAaN,UAAed,MAAAe,EAAKd,KAAEA,EAAIC,OAAEA,IAC1B,IAAK,IAAIc,EAAI,EAAGA,GAAKd,EAAQc,GAAK,EAC9Bb,EAAca,EAAGD,GACdE,MAAK,EAACb,SAAEA,EAAQJ,MAAEA,MACjBN,EAAAwB,OAAOC,QAAQ,uBAAqBf,QAAiBJ,UAEtDoB,OAAM,EAAChB,SAAEA,EAAQJ,MAAEA,MAClBN,EAAAwB,OAAOG,QAAQ,sBAAoBjB,QAAiBJ,UAExDe,GAASd,EAZbqB,CALiB,CACftB,MAAOuB,OAAO3B,EAAKI,MAAMwB,OACzBvB,KAAMsB,OAAO3B,EAAKK,KAAKuB,OACvBtB,OAAQqB,OAAO3B,EAAKM,OAAOsB","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n}\n\nrefs.form.addEventListener('submit', (evt) => {\n  evt.preventDefault();\n  getFormData();\n});\n\nfunction getFormData() {\n  const formData = {\n    delay: Number(refs.delay.value),\n    step: Number(refs.step.value),\n    amount: Number(refs.amount.value),\n  }\n  for1(formData);\n}\n\nfunction for1({delay, step, amount}) {\n  for (let i = 1; i <= amount; i += 1) {\n      createPromise(i, delay)\n        .then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        })\n      delay += step;\n  }\n}\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n      reject({ position, delay });\n    }, delay);\n\n  });\n};\n  // for (let i = 1; i <= formData.amount; i += 1) {\n  //   createPromise(i, formData.delay)\n  //     .then(({ position, delay }) => {\n  //       Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  //     })\n  //     .catch(({ position, delay }) => {\n  //       Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  //     })\n  //   formData.delay += formData.step;\n  // }"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","delay","step","amount","$47d4ff9957288465$var$createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","evt","preventDefault","delay1","i","then","Notify","success","catch","failure","$47d4ff9957288465$var$for1","Number","value"],"version":3,"file":"03-promises.d7d51078.js.map"}